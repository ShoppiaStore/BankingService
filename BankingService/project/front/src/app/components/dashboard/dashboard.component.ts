import { Component, OnInit } from '@angular/core';
import { Router, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AccountService } from '../../services/account.service';
import { AuthService } from '../../services/auth.service';
import { Account } from '../../models/account.model';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterModule]
})
export class DashboardComponent implements OnInit {
  accounts: Account[] = [];
  loading = false;
  creating = false;
  errorMessage = '';
  showCreateForm = false;
  createAccountForm: FormGroup;

  constructor(
    private accountService: AccountService,
    private authService: AuthService,
    private router: Router,
    private fb: FormBuilder
  ) {
    this.createAccountForm = this.fb.group({
      accountName: ['', [Validators.required, Validators.minLength(3)]],
      accountType: ['SAVINGS', Validators.required]
    });
  }

  ngOnInit(): void {
    console.log('Dashboard loading...');
    console.log('Token exists:', this.authService.isLoggedIn());
    console.log('Token valid:', this.authService.isTokenValid());
    this.loadAccounts();
  }

  loadAccounts(): void {
    console.log('Loading accounts...');
    this.loading = true;
    this.errorMessage = '';

    this.accountService.getUserAccounts().subscribe({
      next: (response) => {
        console.log('Accounts response:', response);
        this.loading = false;
        if (response.success) {
          this.accounts = response.data;
        } else {
          this.errorMessage = response.message;
        }
      },
      error: (error) => {
        console.error('Error loading accounts:', error);
        this.loading = false;
        this.errorMessage = error.error?.message || 'Error loading accounts';
      }
    });
  }

  viewAccountDetails(accountId: number): void {
    this.router.navigate(['/account', accountId]);
  }

  toggleCreateForm(): void {
    this.showCreateForm = !this.showCreateForm;
    if (!this.showCreateForm) {
      this.resetForm();
    }
  }

  createAccount(): void {
    if (this.createAccountForm.invalid) {
      return;
    }

    console.log('Creating account:', this.createAccountForm.value);
    this.creating = true;
    this.errorMessage = '';

    const newAccount: Account = {
      accountName: this.createAccountForm.value.accountName,
      accountType: this.createAccountForm.value.accountType,
      balance: 0,
      cardNumber: '' // Will be generated by backend
    };

    this.accountService.createAccount(newAccount).subscribe({
      next: (response) => {
        console.log('Account created:', response);
        this.creating = false;
        if (response.success) {
          this.accounts.push(response.data);
          this.showCreateForm = false;
          this.resetForm();
        } else {
          this.errorMessage = response.message;
        }
      },
      error: (error) => {
        console.error('Error creating account:', error);
        this.creating = false;
        this.errorMessage = error.error?.message || 'Error creating account';
      }
    });
  }

  resetForm(): void {
    this.createAccountForm.reset({
      accountName: '',
      accountType: 'SAVINGS'
    });
  }

  logout(): void {
    this.authService.logout();
  }

  maskCardNumber(cardNumber: string): string {
    if (!cardNumber) return '';
    // Show full card number instead of masking
    return cardNumber;
  }

  getAccountTypeText(type: string): string {
    const types: { [key: string]: string } = {
      'SAVINGS': 'توفير',
      'CHECKING': 'جاري',
      'BUSINESS': 'تجاري',
      'CREDIT': 'ائتمان',
      'Dollar': 'دولار'
    };
    return types[type] || type;
  }
}
